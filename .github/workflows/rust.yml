name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    paths: # Make sure to keep sync'd https://github.com/pyrsia/pyrsia/blob/main/.github/workflows/rust-lint-skipped.yml#L8
      - .github/workflows/rust.yml
      - '**/*.rs'
      - '**/Cargo.toml'
      - Cargo.lock
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  # OS/X  Build Job
  build-osx:
    runs-on: macos-latest
    env:
      RUSTC_WRAPPER: /Users/runner/.cargo/bin/sccache
      CARGO_INCREMENTAL: 0
    steps:
    - uses: actions/checkout@v3

    # Use sscache store in GitHub cache
    - uses: actions/cache@v3
      with:
        path: /Users/runner/Library/Caches/Mozilla.sccache
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install sccache from binary
    - run: |
        .github/workflows/sccache-macos.sh
        sccache --start-server
        sccache --show-stats

    # Need to add build number to version number
    - name: Add Build to Version Number
      run: |
        sed -i.bak "/^version = \"0.1.0\"/s/\"\$/+${{ github.run_number }}\"/" Cargo.toml

    - name: Build Release and Test Binaries
      run: |
        .github/workflows/build.sh
        sccache --show-stats

    - name: Execute Test Cases
      run: |
        cargo test --workspace --verbose --release

  build-push-linux:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: /home/runner/.cargo/bin/sccache
      CARGO_INCREMENTAL: 0
    steps:
    - uses: actions/checkout@v3

    # Use sscache store in GitHub cache
    - uses: actions/cache@v3
      with:
        path: /home/runner/.cache/sccache
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install sccache from binary
    - run: |
        .github/workflows/sccache-linux.sh
        sccache --start-server
        sccache --show-stats

    # Need to add build number to version number
    - name: Add Build to Version Number
      run: |
        sed -i.bak "/^version = \"0.1.0\"/s/\"\$/+${{ github.run_number }}\"/" Cargo.toml

    # Run cargo build in parallel using sscache to avoid OS locking errors
    - name: Build Release and Test Binaries
      run: |
        .github/workflows/build.sh
        sccache --show-stats

    - name: Execute Test Cases
      run: |
        cargo test --workspace --verbose --release

    # Install cargo deb and strip
    - name: Install cargo-deb cargo-strip
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      uses: actions-rs/cargo@v1.0.3
      with:
        command: install
        args: cargo-deb cargo-strip --force

    # Strip binaries
    - name: Strip Binaries
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      run: |
        cargo strip

    # Create Pyrsia .deb file
    - name: Package Pyrsia as deb file
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      uses: actions-rs/cargo@v1.0.3
      with:
        command: deb
        args: --no-build -v

    # Login to GCS
    - name: Google Auth
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: 'projects/679352079717/locations/global/workloadIdentityPools/pyrsia-pool/providers/github-provider'
        service_account: 'pyrsia-ghaction@pyrsia-sandbox.iam.gserviceaccount.com'

    # Add gsutils
    - name: Set up Cloud SDK
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      uses: 'google-github-actions/setup-gcloud@v0'

    # Add the prysia .deb file to the NIGHTLY apt repo which resides on GCS
    - name: Publish Build to NIGHTLY GCS repo
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      run: |
        .github/workflows/aptly.sh target/debian/pyrsia_0.1.0+${{ github.run_number }}_amd64.deb nightly
      env:
        GPG_KEY: ${{ secrets.GPG_KEY }}

    # Add the prysia .deb file to the STABLE apt repo which resides on GCS
    - name: Publish Release to STABLE GCS repo
      # Only add to STABLE on publishing of a release
      if: github.repository_owner == 'pyrsia' && github.event_name == 'release'
      run: |
        .github/workflows/aptly.sh target/debian/pyrsia_0.1.0+${{ github.run_number }}_amd64.deb stable
      env:
        GPG_KEY: ${{ secrets.GPG_KEY }}

    # Update the helm chart values with the image tag
    - name: Add Build to Version Number in Chart and Values files
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      run: |
        sudo go install github.com/mikefarah/yq/v4@latest
        yq e '.image.tag |= "0.1.0+${{ github.run_number }}"' -i installers/helm/pyrsia-node/values.yaml
        yq e '.version |= "0.1.0+${{ github.run_number }}"' -i installers/helm/pyrsia-node/Chart.yaml
        yq e '.appVersion |= "0.1.0+${{ github.run_number }}"' -i installers/helm/pyrsia-node/Chart.yaml

    # Add the updated helm chart to the helm NIGHTLY repo
    - name: Add the updated helm chart to the helm NIGHTLY repo
      if: github.repository_owner == 'pyrsia' && (github.event_name == 'push' || github.event_name == 'release')
      run: |
        .github/workflows/chartmuseum.sh nightly

    # Add the updated helm chart to the helm STABLE repo
    - name: Add the updated helm chart to the helm STABLE repo
      if: github.repository_owner == 'pyrsia' && github.event_name == 'release'
      run: |
        .github/workflows/chartmuseum.sh stable

  # Coverage wipes the cache in order to instrument the code.  No need to wait for other jobs to run it.
  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run cargo-tarpaulin
      uses: actions-rs/tarpaulin@v0.1
      with:
        args: '--all-targets --workspace -- --test-threads 1'

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        fail_ci_if_error: ${{ github.repository_owner == 'pyrsia' }}

  # Docker build that uses the published .deb file from the Linux build
  docker:
    runs-on: ubuntu-latest
    needs: [build-push-linux]
    if: github.repository_owner == 'pyrsia' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker Image for Pyrsia Node
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        file: installers/docker/AptGet.Dockerfile
        tags: pyrsiaoss/pyrsia-node:0.1.0-${{ github.run_number }}

    - name: Only build if CodeCoverage.Dockerfile changed
      uses: tj-actions/changed-files@v29
      with:
          fetch-depth: 2
      id: changed-files

    - name: Build and Push Code Coverage Base Image
      if: contains(steps.changed-files.outputs.all_changed_and_modified_files, 'CodeCoverage.Dockerfile')
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        file: installers/docker/CodeCoverage.Dockerfile
        tags: pyrsiaoss/codecoverage:1.0
