name: Rust

on:
  push:
    branches: [ main ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  # OS/X  Build Job 
  build-osx:
    runs-on: macos-latest
    env: 
      RUSTC_WRAPPER: /Users/runner/.cargo/bin/sccache
      CARGO_INCREMENTAL: 0   
    steps:
    - uses: actions/checkout@v3
  
    # Use sscache store in GitHub cache
    - uses: actions/cache@v2
      with:
        path: /Users/runner/Library/Caches/Mozilla.sccache
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install sccache from binary
    - run: |
        .github/workflows/sccache-macos.sh
        sccache --start-server
        sccache --show-stats

    # Need to add build number to version number
    - name: Add Build to Version Number
      run: |
        sed -i.bak "/^version = \"0.1.0\"/s/\"\$/+${{ github.run_number }}\"/" Cargo.toml

    - name: Build Release and Test Binaries
      run: |
        .github/workflows/build.sh 
        sccache --show-stats

    - name: Execute Test Cases
      run: |
        cargo test --workspace --verbose --release

  build-push-linux:
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: /home/runner/.cargo/bin/sccache
      CARGO_INCREMENTAL: 0      
    steps:
    - uses: actions/checkout@v3

    # Use sscache store in GitHub cache
    - uses: actions/cache@v2
      with:
        path: /home/runner/.cache/sccache
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install sccache from binary
    - run: |
        .github/workflows/sccache-linux.sh
        sccache --start-server
        sccache --show-stats

    # Install cargo deb and strip
    - name: Install cargo-deb cargo-strip
      uses: actions-rs/cargo@v1.0.3
      with:
        command: install
        args: cargo-deb cargo-strip --force

    # Need to add build number to version number
    - name: Add Build to Version Number
      run: |
        sed -i.bak "/^version = \"0.1.0\"/s/\"\$/+${{ github.run_number }}\"/" Cargo.toml

    # Run cargo build in parallel using sscache to avoid OS locking errors
    - name: Build Release and Test Binaries
      run: |
        .github/workflows/build.sh
        sccache --show-stats 

    - name: Execute Test Cases
      run: |
        cargo test --workspace --verbose --release

    # Strip binaries 
    - name: Strip Binaries
      run: |
        cargo strip

    # Create Pyrsia .deb file
    - name: Package Pyrsia as deb file
      uses: actions-rs/cargo@v1.0.3
      with:
        command: deb
        args: --no-build -v

    # Add the prysia .deb file to the apt repo which is part of
    # the github website repo
    - name: Upload Pyrsia .deb to website repo
      uses: sbtaylor15/apt-repo-action@v2.0.4
      # Only when we push on the main repository should we upload the results
      if: github.repository_owner == 'pyrsia' && github.event_name == 'push'
      with:
        github_token: ${{ secrets.APT }}
        repo_supported_version: |
          focal
        repo_supported_arch: |
          amd64
        page_branch: gh-pages
        file: /github/workspace/target/debian/pyrsia_0.1.0+${{ github.run_number }}_amd64.deb
        file_target_version: focal
        public_key: ${{ secrets.GPG_PUBLIC }}
        private_key: ${{ secrets.GPG_PRIVATE }}
        key_passphrase: ${{ secrets.GPG_SECRET }}
        github_repository: pyrsia/pyrsia.github.io
  
  # Coverage wipes the cache in order to instrument the code.  No need to wait for other jobs to run it.
  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run cargo-tarpaulin
      uses: actions-rs/tarpaulin@v0.1
      with:
        args: '-- --test-threads 1'

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v2
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        fail_ci_if_error: ${{ github.repository_owner == 'pyrsia' }}
  
  # Docker build that uses the published .deb file from the Linux build
  docker:
    runs-on: ubuntu-latest
    needs: [build-push-linux]
    if: github.repository_owner == 'pyrsia' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker Image for Pyrsia Node
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        file: installers/docker/AptGet.Dockerfile
        tags: pyrsiaoss/pyrsia-node:latest

    - name: Only build if CodeCoverage.Dockerfile changed
      uses: tj-actions/changed-files@v18.7
      id: changed-files

    - name: Build and Push Code Coverage Base Image
      if: contains(steps.changed-files.outputs.all_changed_and_modified_files, 'CodeCoverage.Dockerfile')
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        file: installers/docker/CodeCoverage.Dockerfile
        tags: pyrsiaoss/codecoverage:1.0
